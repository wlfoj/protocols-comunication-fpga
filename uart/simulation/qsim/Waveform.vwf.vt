// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/23/2024 23:35:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          UART_TX
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UART_TX_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] data;
reg en;
reg [1:0] flag_count_data;
reg flag_parity;
reg reset;
// wires                                               
wire done;
wire tx;

// assign statements (if any)                          
UART_TX i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data(data),
	.done(done),
	.en(en),
	.flag_count_data(flag_count_data),
	.flag_parity(flag_parity),
	.reset(reset),
	.tx(tx)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
end 

// en
initial
begin
	en = 1'b0;
end 
// flag_count_data[ 1 ]
initial
begin
	flag_count_data[1] = 1'b0;
end 
// flag_count_data[ 0 ]
initial
begin
	flag_count_data[0] = 1'b0;
end 

// flag_parity
initial
begin
	flag_parity = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
endmodule

